/*
 * GenSim AARCH64 Model
 *
 * Copyright (C) University of Edinburgh 2016.  All Rights Reserved.
 *
 * Tom Spink <tspink@inf.ed.ac.uk>
 */
AC_ARCH(arm64)
{
	ac_mem Data(64, 64, little, 0);
	ac_mem Fetch(64, 64, little, 1);

	// typedef (le_u64) uint64;
	// typedef (le_u32) uint32;
	// typedef (le_u16) uint16;
	// typedef (le_u8) uint8;
	// typedef (le_s64) sint64;
	// typedef (le_s32) sint32;
	// typedef (le_s16) sint16;
	// typedef (le_s8) sint8;
	// typedef (le_u8[_]) uint8[_];

	// General Purpose Registers
	ac_regspace(248) {
		// bank NAME (TYPE, OFFSET, COUNT, REG-STRIDE, # ELEMS, ELEM-SIZE, ELEM-STRIDE)

		bank RBX (uint64, 0, 31, 8, 1, 8, 8);
		bank RBW (uint32, 0, 31, 8, 1, 4, 4);
	}

	// General Purpose Vector Registers
	ac_regspace(1024) {
		bank VBL (uint64, 0, 32, 16, 1, 8, 8);
		bank VBH (uint64, 8, 32, 16, 1, 8, 8);

		bank VB    (uint8,  0, 32, 16, 1, 1, 1);
		bank VH    (uint16, 0, 32, 16, 1, 2, 2);
		bank VS    (uint32, 0, 32, 16, 1, 4, 4);
		bank VD    (uint64, 0, 32, 16, 1, 8, 8);
		bank VQ   (uint128, 0, 32, 16, 1, 16, 16);

		bank FS    (float,  0, 32, 16, 1, 4, 4);
		bank FSH   (uint32, 4, 32, 16, 1, 4, 4);
		bank FD    (double, 0, 32, 16, 1, 8, 8);

		bank VF2S  (float,  0, 32, 16, 2, 4, 4);
		bank VF4S  (float,  0, 32, 16, 4, 4, 4);
		bank VF2D  (double, 0, 32, 16, 2, 8, 8);

		bank VB8B  (uint8,  0, 32, 16, 8, 1, 1);
		bank VB16B (uint8,  0, 32, 16, 16, 1, 1);

		bank VB4H  (uint16, 0, 32, 16, 4, 2, 2);
		bank VB8H  (uint16, 0, 32, 16, 8, 2, 2);

		bank VB2S  (uint32, 0, 32, 16, 2, 4, 4);
		bank VB4S  (uint32, 0, 32, 16, 4, 4, 4);

		bank VB2D  (uint64, 0, 32, 16, 2, 8, 8);

		bank VB1Q  (uint128, 0, 32, 16, 1, 16, 16);

		bank TBL   (uint8, 0, 512, 1, 1, 1, 1);
	}

	ac_regspace(16) {
		slot PC (uint64, 8, 0) PC;
	}

	ac_regspace(10) {
		slot N (uint8, 1, 0) N;
		slot Z (uint8, 1, 1) Z;
		slot C (uint8, 1, 2) C;
		slot V (uint8, 1, 3) V;

		slot D (uint8, 1, 4);
		slot A (uint8, 1, 5);
		slot I (uint8, 1, 6);
		slot F (uint8, 1, 7);

		slot MODE (uint8, 1, 9) ISA;
	}

	ac_regspace(64) {
		slot TTBR0   (uint64, 8, 0);
		slot TTBR1   (uint64, 8, 8);
		slot TCR_EL1 (uint64, 8, 16);
		slot VBAR    (uint64, 8, 24);

		slot TPIDR_EL0 (uint64, 8, 32);
		slot TPIDR_EL1 (uint64, 8, 40);
		slot TPIDRRO_EL0 (uint64, 8, 48);

		slot PAR_EL1 (uint64, 8, 56);
	}

	ac_regspace(128) {
		slot ELR_EL1	(uint64, 8, 0);
		slot SPSR_EL1	(uint32, 4, 8);
		slot ESR_EL1	(uint32, 4, 16);
		slot FAR_EL1	(uint64, 8, 24);

		slot SP_EL0		(uint64, 8, 32) SP;
		slot SP_EL1		(uint64, 8, 40);

		slot FPCR		(uint32, 4, 48);

		slot MDSCR_EL1	(uint32, 4, 52);

		slot CONTEXTIDR_EL1 (uint32, 4, 56);

		slot TRACEVAL	(uint64, 8, 120);
	}

	ac_wordsize 64;

	ac_features {
		feature A64_EL;
		feature A64_SPSEL;
		feature A64_SS;
		feature A64_A1;
		feature EMULATE_LINUX;
		feature EMULATE_LINUX_ARCHSIM;
		feature A64_KERNEL_ICOUNT;
		feature A64_KERNEL_BRCOUNT;
		feature A64_USER_ICOUNT;
		feature A64_USER_BRCOUNT;
	}

	ARCH_CTOR(arm)
	{
		ac_isa("isa.ac");
		set_endian("little");
	};
};
