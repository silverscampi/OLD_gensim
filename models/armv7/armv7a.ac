/*
	Matthew Calder 		s0935238
	Paul-Jules Micolet	s0939834
	Gerald Chau 		s0903611 
	PASTA2 			2012
*/

AC_ARCH(armv7a)
{

	ac_mem Fetch(32, 32, little, 1);
	ac_mem Mem(32, 32, little, 0);
	ac_mem UserMem(32, 32, little, 0);

	// General Purpose Registers
	ac_regspace(64) {
		// bank NAME (TYPE, OFFSET, COUNT, REG-STRIDE, # ELEMS, ELEM-SIZE, ELEM-STRIDE)
		bank RB (uint32, 0, 16, 4, 1, 4, 4);
			
		slot PC (uint32, 4, 60) PC;
		slot SP (uint32, 4, 52) SP;
	}
	
	// Floating point registers
	// Type, offset, count, register stride, element count, element size, element stride
	ac_regspace (256) {
		bank FPSP (float,  0, 32, 4, 1, 4, 4);
		bank FPDP (double, 0, 32, 8, 1, 8, 8);

		bank VD (float, 0, 32, 8, 2, 4, 4);
		bank VQ (float, 0, 16, 16, 4, 4, 4);

		bank VU8  (uint8,  0, 32, 8, 8, 1, 1);
		bank VU16 (uint16, 0, 32, 8, 4, 2, 2);
		bank VU32 (uint32, 0, 32, 8, 2, 4, 4);
		bank VU64 (uint64, 0, 32, 8, 1, 8, 8);
	}

	// General Flags
	ac_regspace (14) {
		slot C (uint8, 1, 0) C;
		slot Z (uint8, 1, 1) Z;
		slot N (uint8, 1, 2) N;
		slot V (uint8, 1, 3) V;
		slot Q (uint8, 1, 4) Q;

		slot SPSR (uint32, 4, 5);

		slot GE0 (uint8, 1, 9);
		slot GE1 (uint8, 1, 10);
		slot GE2 (uint8, 1, 11);
		slot GE3 (uint8, 1, 12); 
		
		slot A (uint8, 1, 13);
	}

	// ITSTATE
	ac_regspace(1) {
		slot ITSTATE(uint8, 1, 0);
	}

	// FP Status Flags
	ac_regspace (12) {
		slot FP_C (uint8, 1, 0);
		slot FP_Z (uint8, 1, 1);
		slot FP_N (uint8, 1, 2);
		slot FP_V (uint8, 1, 3);
		
		slot FPEXC (uint32, 4, 4);
		slot FPSCR (uint32, 4, 8);
	}

	// Software Thread ID Registers
	ac_regspace(16) {
		slot TPIDRURW (uint32, 4, 0);
		slot TPIDRURO (uint32, 4, 4);
		slot TPIDRPRW (uint32, 4, 8);
		slot TBUFBASE (uint32, 4, 12);
	}

	// FSS Regs
	ac_regspace(16) {
		slot M (uint8, 1, 0);
		slot F (uint8, 1, 1);
		slot I (uint8, 1, 2);
		slot cpV (uint8, 1, 3);	
		
		slot CP_Status (uint32, 4, 4);
		
		slot DACR (uint32, 4, 8);
	}

	// Instruction Set State
	ac_regspace(1) {
	  slot T (uint8, 1, 0);
	}

	// Exclusive monitor state
	ac_regspace(8) {
		slot XState (uint32, 4, 0);
		slot XAddr (uint32, 4, 4);
	}

	// Bank storage used for mode switching. Note that we have an 
	// 'extra' bank as compared to hardware implementations since we
	// can't efficiently actually switch between banks
	
	// We also have an extra register compared to the 'current' mode,
	// which is used to back up the CPSR as we switch mode
	
	//Our 'extra' bank. We back user registers up here when we switch
	//to a different bank and swap them back when we're done
	ac_regspace(68) {
		bank RB_usr (uint32, 0, 17, 4, 1, 4, 4);
	}
	ac_regspace(68) {
		bank RB_fiq (uint32, 0, 17, 4, 1, 4, 4);
	}
	ac_regspace(68) {
		bank RB_irq (uint32, 0, 17, 4, 1, 4, 4);
	}
	ac_regspace(68) {
		bank RB_svc (uint32, 0, 17, 4, 1, 4, 4);
	}
	ac_regspace(68) {
		bank RB_abt (uint32, 0, 17, 4, 1, 4, 4);
	}
	ac_regspace(68) {
		bank RB_und (uint32, 0, 17, 4, 1, 4, 4);
	}
	
	ac_features {
		feature ARM_FPU_ENABLED_CPACR;
		feature ARM_NEON_ENABLED_CPACR;
		feature ARM_FPU_ENABLED_FPEXC;

		feature ARM_PRIV;

		feature ARM_FPU_ENABLED;
		feature ARM_SDIV_UDIV;
	}

	ac_wordsize 32;

	ARCH_CTOR(armv5e) 
	{
		ac_isa("armv7a_isa.ac");
		ac_isa("armv7a_thumb_isa.ac");
		set_endian("little");
		
		set_feature(ARM_SDIV_UDIV, 1);
	};
};
